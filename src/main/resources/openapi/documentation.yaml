openapi: 3.0.0
info:
  title: Admin Service API
  description: API documentation
  version: 1.0.0

servers:
  - url: http://127.0.0.1:8080
    description: Local server

paths:
  /departments:
    post:
      summary: Create a new department
      operationId: createDepartment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
      responses:
        '201':
          description: Department created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    get:
      summary: Get all departments
      operationId: getDepartments
      responses:
        '200':
          description: List of departments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /departments/{id}:
    get:
      summary: Get a department by ID
      operationId: getDepartmentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Department details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    put:
      summary: Update a department by ID
      operationId: updateDepartment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
      responses:
        '200':
          description: Department updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      summary: Delete a department by ID
      operationId: deleteDepartment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Department deleted

  /rooms:
    post:
      summary: Create a new room
      operationId: createRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '201':
          description: Room created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    get:
      summary: Get all rooms
      operationId: getRooms
      responses:
        '200':
          description: List of rooms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /rooms/{id}:
    get:
      summary: Get a room by ID
      operationId: getRoomById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Room details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    put:
      summary: Update a room by ID
      operationId: updateRoom
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '200':
          description: Room updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      summary: Delete a room by ID
      operationId: deleteRoom
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Room deleted

  /professors:
    post:
      summary: Create a new professor
      operationId: createProfessor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Professor'
      responses:
        '201':
          description: Professor created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    get:
      summary: Get all professors
      operationId: getProfessors
      responses:
        '200':
          description: List of professors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /professors/{id}:
    get:
      summary: Get a professor by ID
      operationId: getProfessorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Professor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    put:
      summary: Update a professor by ID
      operationId: updateProfessor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Professor'
      responses:
        '200':
          description: Professor updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      summary: Delete a professor by ID
      operationId: deleteProfessor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Professor deleted

  /semesters:
    post:
      summary: Create a new semester
      operationId: createSemester
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Semester'
      responses:
        '201':
          description: Semester created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    get:
      summary: Get all semesters
      operationId: getSemesters
      responses:
        '200':
          description: List of semesters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /semesters/{id}:
    get:
      summary: Get a semester by ID
      operationId: getSemesterById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Semester details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    put:
      summary: Update a semester by ID
      operationId: updateSemester
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Semester'
      responses:
        '200':
          description: Semester updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      summary: Delete a semester by ID
      operationId: deleteSemester
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Semester deleted

  /courses:
    post:
      summary: Create a new course
      operationId: createCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: Course created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    get:
      summary: Get all courses
      operationId: getCourses
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /courses/{id}:
    get:
      summary: Get a course by ID
      operationId: getCourseById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Course details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    put:
      summary: Update a course by ID
      operationId: updateCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Course updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      summary: Delete a course by ID
      operationId: deleteCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Course deleted

  /semesterCourses:
    post:
      summary: "Create a new SemesterCourse"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SemesterCourse'
      responses:
        "201":
          description: "SemesterCourse created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: "Invalid input"

    get:
      summary: "Get all SemesterCourses"
      responses:
        "200":
          description: "List of all SemesterCourses"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SemesterCourse'
        "404":
          description: "No SemesterCourses found"

  /semesterCourses/{id}:
    get:
      summary: "Get a SemesterCourse by ID"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: "SemesterCourse ID"
      responses:
        "200":
          description: "Details of a specific SemesterCourse"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemesterCourse'
        "400":
          description: "Invalid SemesterCourse ID"
        "404":
          description: "SemesterCourse not found"

    put:
      summary: "Update a SemesterCourse by ID"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: "SemesterCourse ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SemesterCourse'
      responses:
        "200":
          description: "SemesterCourse updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: "Invalid SemesterCourse ID"
        "404":
          description: "SemesterCourse not found"

    delete:
      summary: "Delete a SemesterCourse by ID"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: "SemesterCourse ID"
      responses:
        "200":
          description: "SemesterCourse deleted successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: "Invalid SemesterCourse ID"
        "404":
          description: "SemesterCourse not found"


  /courseProfessors:
    post:
      summary: Create a new course-professor relationship
      operationId: createCourseProfessor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseProfessor'
      responses:
        '201':
          description: Course-Professor relationship created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    get:
      summary: Get all course-professor relationships
      operationId: getCourseProfessors
      responses:
        '200':
          description: List of course-professor relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /courseProfessors/{id}:
    get:
      summary: Get a course-professor relationship by ID
      operationId: getCourseProfessorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Course-Professor relationship details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    put:
      summary: Update a course-professor relationship by ID
      operationId: updateCourseProfessor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseProfessor'
      responses:
        '200':
          description: Course-Professor relationship updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      summary: Delete a course-professor relationship by ID
      operationId: deleteCourseProfessor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Course-Professor relationship deleted


components:
  schemas:
    Response:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        data:
          type: object

    Course:
      type: object
      properties:
        courseID:
          type: integer
        courseName:
          type: string
        courseCode:
          type: string
        departmentID:
          type: integer
        credits:
          type: integer
        courseType:
          type: string
          enum: [ ONLINE, OFFLINE ]

    CourseProfessor:
      type: object
      properties:
        courseProfessorID:
          type: integer
        course:
          $ref: '#/components/schemas/Course'
        professor:
          $ref: '#/components/schemas/Professor'

    Department:
      type: object
      properties:
        departmentID:
          type: integer
        departmentName:
          type: string
        departmentCode:
          type: string

    Professor:
      type: object
      properties:
        professorID:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        shortName:
          type: string
        departmentID:
          type: integer
        email:
          type: string
        phone:
          type: string
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'

    Room:
      type: object
      properties:
        roomID:
          type: integer
        roomNumber:
          type: string
        capacity:
          type: integer
        roomType:
          type: string
          enum: [ LECTURE, LAB ]

    Semester:
      type: object
      properties:
        semesterID:
          type: integer
        semesterName:
          type: string
        semesterCode:
          type: string
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'

    SemesterCourse:
      type: object
      properties:
        semesterCourseID:
          type: integer
        semester:
          $ref: '#/components/schemas/Semester'
        course:
          $ref: '#/components/schemas/Course'

